# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mc_rpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='mc_rpc.proto',
  package='mc_rpc',
  syntax='proto3',
  serialized_pb=_b('\n\x0cmc_rpc.proto\x12\x06mc_rpc\"#\n\x08response\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0b\n\x03\x61\x63k\x18\x02 \x01(\x08\"7\n\x08movement\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x1f\n\x07\x61\x63tions\x18\x02 \x03(\x0e\x32\x0e.mc_rpc.Action\"!\n\x04Gear\x12\n\n\x02id\x18\x01 \x01(\x05\x12\r\n\x05index\x18\x02 \x01(\x05\"9\n\x0e\x44istanceMetres\x12\n\n\x02id\x18\x01 \x01(\x05\x12\r\n\x05North\x18\x02 \x01(\x02\x12\x0c\n\x04\x45\x61st\x18\x03 \x01(\x02\"<\n\rDistanceAngle\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x10\n\x08\x64istance\x18\x02 \x01(\x02\x12\r\n\x05\x61ngle\x18\x03 \x01(\x05\">\n\x05point\x12\x10\n\x08latitude\x18\x01 \x01(\x02\x12\x11\n\tlongitude\x18\x02 \x01(\x02\x12\x10\n\x08\x61ltitude\x18\x03 \x01(\x02\"6\n\twaypoints\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x1d\n\x06points\x18\x02 \x03(\x0b\x32\r.mc_rpc.point\"\x10\n\x02id\x12\n\n\x02id\x18\x01 \x01(\x02*\x94\x01\n\x06\x41\x63tion\x12\x08\n\x04STOP\x10\x00\x12\x0b\n\x07\x46ORWARD\x10\x01\x12\x0c\n\x08\x42\x41\x43KWARD\x10\x02\x12\x0c\n\x08LEFT_YAW\x10\x04\x12\r\n\tRIGHT_YAW\x10\x08\x12\r\n\tLEFT_ROLL\x10\x10\x12\x0e\n\nRIGHT_ROLL\x10 \x12\x06\n\x02UP\x10@\x12\t\n\x04\x44OWN\x10\x80\x01\x12\x0c\n\x07INVALID\x10\xee\x01\x12\x08\n\x03\x41NY\x10\xff\x01\x32\xbd\x04\n\x02\x46\x43\x12-\n\x0bResetLoiter\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12\x32\n\nControlFRU\x12\x10.mc_rpc.movement\x1a\x10.mc_rpc.response\"\x00\x12+\n\x07SetGear\x12\x0c.mc_rpc.Gear\x1a\x10.mc_rpc.response\"\x00\x12<\n\x0eTargetByMetres\x12\x16.mc_rpc.DistanceMetres\x1a\x10.mc_rpc.response\"\x00\x12:\n\rTargetByAngle\x12\x15.mc_rpc.DistanceAngle\x1a\x10.mc_rpc.response\"\x00\x12\x32\n\tPlanRoute\x12\x11.mc_rpc.waypoints\x1a\x10.mc_rpc.response\"\x00\x12(\n\x06Guided\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12%\n\x03RTL\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12&\n\x04\x41uto\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12+\n\tAI_Guided\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12(\n\x06\x41I_RTL\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x12)\n\x07\x41I_Auto\x12\n.mc_rpc.id\x1a\x10.mc_rpc.response\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_ACTION = _descriptor.EnumDescriptor(
  name='Action',
  full_name='mc_rpc.Action',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STOP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FORWARD', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BACKWARD', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LEFT_YAW', index=3, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RIGHT_YAW', index=4, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LEFT_ROLL', index=5, number=16,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RIGHT_ROLL', index=6, number=32,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UP', index=7, number=64,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOWN', index=8, number=128,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INVALID', index=9, number=238,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ANY', index=10, number=255,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=413,
  serialized_end=561,
)
_sym_db.RegisterEnumDescriptor(_ACTION)

Action = enum_type_wrapper.EnumTypeWrapper(_ACTION)
STOP = 0
FORWARD = 1
BACKWARD = 2
LEFT_YAW = 4
RIGHT_YAW = 8
LEFT_ROLL = 16
RIGHT_ROLL = 32
UP = 64
DOWN = 128
INVALID = 238
ANY = 255



_RESPONSE = _descriptor.Descriptor(
  name='response',
  full_name='mc_rpc.response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.response.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ack', full_name='mc_rpc.response.ack', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=59,
)


_MOVEMENT = _descriptor.Descriptor(
  name='movement',
  full_name='mc_rpc.movement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.movement.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='actions', full_name='mc_rpc.movement.actions', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=61,
  serialized_end=116,
)


_GEAR = _descriptor.Descriptor(
  name='Gear',
  full_name='mc_rpc.Gear',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.Gear.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='index', full_name='mc_rpc.Gear.index', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=118,
  serialized_end=151,
)


_DISTANCEMETRES = _descriptor.Descriptor(
  name='DistanceMetres',
  full_name='mc_rpc.DistanceMetres',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.DistanceMetres.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='North', full_name='mc_rpc.DistanceMetres.North', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='East', full_name='mc_rpc.DistanceMetres.East', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=153,
  serialized_end=210,
)


_DISTANCEANGLE = _descriptor.Descriptor(
  name='DistanceAngle',
  full_name='mc_rpc.DistanceAngle',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.DistanceAngle.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='distance', full_name='mc_rpc.DistanceAngle.distance', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='angle', full_name='mc_rpc.DistanceAngle.angle', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=212,
  serialized_end=272,
)


_POINT = _descriptor.Descriptor(
  name='point',
  full_name='mc_rpc.point',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='latitude', full_name='mc_rpc.point.latitude', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='longitude', full_name='mc_rpc.point.longitude', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='altitude', full_name='mc_rpc.point.altitude', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=274,
  serialized_end=336,
)


_WAYPOINTS = _descriptor.Descriptor(
  name='waypoints',
  full_name='mc_rpc.waypoints',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.waypoints.id', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='points', full_name='mc_rpc.waypoints.points', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=338,
  serialized_end=392,
)


_ID = _descriptor.Descriptor(
  name='id',
  full_name='mc_rpc.id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='mc_rpc.id.id', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=394,
  serialized_end=410,
)

_MOVEMENT.fields_by_name['actions'].enum_type = _ACTION
_WAYPOINTS.fields_by_name['points'].message_type = _POINT
DESCRIPTOR.message_types_by_name['response'] = _RESPONSE
DESCRIPTOR.message_types_by_name['movement'] = _MOVEMENT
DESCRIPTOR.message_types_by_name['Gear'] = _GEAR
DESCRIPTOR.message_types_by_name['DistanceMetres'] = _DISTANCEMETRES
DESCRIPTOR.message_types_by_name['DistanceAngle'] = _DISTANCEANGLE
DESCRIPTOR.message_types_by_name['point'] = _POINT
DESCRIPTOR.message_types_by_name['waypoints'] = _WAYPOINTS
DESCRIPTOR.message_types_by_name['id'] = _ID
DESCRIPTOR.enum_types_by_name['Action'] = _ACTION

response = _reflection.GeneratedProtocolMessageType('response', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSE,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.response)
  ))
_sym_db.RegisterMessage(response)

movement = _reflection.GeneratedProtocolMessageType('movement', (_message.Message,), dict(
  DESCRIPTOR = _MOVEMENT,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.movement)
  ))
_sym_db.RegisterMessage(movement)

Gear = _reflection.GeneratedProtocolMessageType('Gear', (_message.Message,), dict(
  DESCRIPTOR = _GEAR,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.Gear)
  ))
_sym_db.RegisterMessage(Gear)

DistanceMetres = _reflection.GeneratedProtocolMessageType('DistanceMetres', (_message.Message,), dict(
  DESCRIPTOR = _DISTANCEMETRES,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.DistanceMetres)
  ))
_sym_db.RegisterMessage(DistanceMetres)

DistanceAngle = _reflection.GeneratedProtocolMessageType('DistanceAngle', (_message.Message,), dict(
  DESCRIPTOR = _DISTANCEANGLE,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.DistanceAngle)
  ))
_sym_db.RegisterMessage(DistanceAngle)

point = _reflection.GeneratedProtocolMessageType('point', (_message.Message,), dict(
  DESCRIPTOR = _POINT,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.point)
  ))
_sym_db.RegisterMessage(point)

waypoints = _reflection.GeneratedProtocolMessageType('waypoints', (_message.Message,), dict(
  DESCRIPTOR = _WAYPOINTS,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.waypoints)
  ))
_sym_db.RegisterMessage(waypoints)

id = _reflection.GeneratedProtocolMessageType('id', (_message.Message,), dict(
  DESCRIPTOR = _ID,
  __module__ = 'mc_rpc_pb2'
  # @@protoc_insertion_point(class_scope:mc_rpc.id)
  ))
_sym_db.RegisterMessage(id)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class FCStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.ResetLoiter = channel.unary_unary(
          '/mc_rpc.FC/ResetLoiter',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.ControlFRU = channel.unary_unary(
          '/mc_rpc.FC/ControlFRU',
          request_serializer=movement.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.SetGear = channel.unary_unary(
          '/mc_rpc.FC/SetGear',
          request_serializer=Gear.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.TargetByMetres = channel.unary_unary(
          '/mc_rpc.FC/TargetByMetres',
          request_serializer=DistanceMetres.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.TargetByAngle = channel.unary_unary(
          '/mc_rpc.FC/TargetByAngle',
          request_serializer=DistanceAngle.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.PlanRoute = channel.unary_unary(
          '/mc_rpc.FC/PlanRoute',
          request_serializer=waypoints.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.Guided = channel.unary_unary(
          '/mc_rpc.FC/Guided',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.RTL = channel.unary_unary(
          '/mc_rpc.FC/RTL',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.Auto = channel.unary_unary(
          '/mc_rpc.FC/Auto',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.AI_Guided = channel.unary_unary(
          '/mc_rpc.FC/AI_Guided',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.AI_RTL = channel.unary_unary(
          '/mc_rpc.FC/AI_RTL',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )
      self.AI_Auto = channel.unary_unary(
          '/mc_rpc.FC/AI_Auto',
          request_serializer=id.SerializeToString,
          response_deserializer=response.FromString,
          )


  class FCServicer(object):

    def ResetLoiter(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def ControlFRU(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetGear(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def TargetByMetres(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def TargetByAngle(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def PlanRoute(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Guided(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RTL(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Auto(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AI_Guided(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AI_RTL(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def AI_Auto(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_FCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ResetLoiter': grpc.unary_unary_rpc_method_handler(
            servicer.ResetLoiter,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'ControlFRU': grpc.unary_unary_rpc_method_handler(
            servicer.ControlFRU,
            request_deserializer=movement.FromString,
            response_serializer=response.SerializeToString,
        ),
        'SetGear': grpc.unary_unary_rpc_method_handler(
            servicer.SetGear,
            request_deserializer=Gear.FromString,
            response_serializer=response.SerializeToString,
        ),
        'TargetByMetres': grpc.unary_unary_rpc_method_handler(
            servicer.TargetByMetres,
            request_deserializer=DistanceMetres.FromString,
            response_serializer=response.SerializeToString,
        ),
        'TargetByAngle': grpc.unary_unary_rpc_method_handler(
            servicer.TargetByAngle,
            request_deserializer=DistanceAngle.FromString,
            response_serializer=response.SerializeToString,
        ),
        'PlanRoute': grpc.unary_unary_rpc_method_handler(
            servicer.PlanRoute,
            request_deserializer=waypoints.FromString,
            response_serializer=response.SerializeToString,
        ),
        'Guided': grpc.unary_unary_rpc_method_handler(
            servicer.Guided,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'RTL': grpc.unary_unary_rpc_method_handler(
            servicer.RTL,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'Auto': grpc.unary_unary_rpc_method_handler(
            servicer.Auto,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'AI_Guided': grpc.unary_unary_rpc_method_handler(
            servicer.AI_Guided,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'AI_RTL': grpc.unary_unary_rpc_method_handler(
            servicer.AI_RTL,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
        'AI_Auto': grpc.unary_unary_rpc_method_handler(
            servicer.AI_Auto,
            request_deserializer=id.FromString,
            response_serializer=response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'mc_rpc.FC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaFCServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ResetLoiter(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def ControlFRU(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetGear(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def TargetByMetres(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def TargetByAngle(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def PlanRoute(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Guided(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RTL(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Auto(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AI_Guided(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AI_RTL(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def AI_Auto(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaFCStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def ResetLoiter(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ResetLoiter.future = None
    def ControlFRU(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    ControlFRU.future = None
    def SetGear(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SetGear.future = None
    def TargetByMetres(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    TargetByMetres.future = None
    def TargetByAngle(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    TargetByAngle.future = None
    def PlanRoute(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    PlanRoute.future = None
    def Guided(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Guided.future = None
    def RTL(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    RTL.future = None
    def Auto(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Auto.future = None
    def AI_Guided(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AI_Guided.future = None
    def AI_RTL(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AI_RTL.future = None
    def AI_Auto(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AI_Auto.future = None


  def beta_create_FC_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('mc_rpc.FC', 'AI_Auto'): id.FromString,
      ('mc_rpc.FC', 'AI_Guided'): id.FromString,
      ('mc_rpc.FC', 'AI_RTL'): id.FromString,
      ('mc_rpc.FC', 'Auto'): id.FromString,
      ('mc_rpc.FC', 'ControlFRU'): movement.FromString,
      ('mc_rpc.FC', 'Guided'): id.FromString,
      ('mc_rpc.FC', 'PlanRoute'): waypoints.FromString,
      ('mc_rpc.FC', 'RTL'): id.FromString,
      ('mc_rpc.FC', 'ResetLoiter'): id.FromString,
      ('mc_rpc.FC', 'SetGear'): Gear.FromString,
      ('mc_rpc.FC', 'TargetByAngle'): DistanceAngle.FromString,
      ('mc_rpc.FC', 'TargetByMetres'): DistanceMetres.FromString,
    }
    response_serializers = {
      ('mc_rpc.FC', 'AI_Auto'): response.SerializeToString,
      ('mc_rpc.FC', 'AI_Guided'): response.SerializeToString,
      ('mc_rpc.FC', 'AI_RTL'): response.SerializeToString,
      ('mc_rpc.FC', 'Auto'): response.SerializeToString,
      ('mc_rpc.FC', 'ControlFRU'): response.SerializeToString,
      ('mc_rpc.FC', 'Guided'): response.SerializeToString,
      ('mc_rpc.FC', 'PlanRoute'): response.SerializeToString,
      ('mc_rpc.FC', 'RTL'): response.SerializeToString,
      ('mc_rpc.FC', 'ResetLoiter'): response.SerializeToString,
      ('mc_rpc.FC', 'SetGear'): response.SerializeToString,
      ('mc_rpc.FC', 'TargetByAngle'): response.SerializeToString,
      ('mc_rpc.FC', 'TargetByMetres'): response.SerializeToString,
    }
    method_implementations = {
      ('mc_rpc.FC', 'AI_Auto'): face_utilities.unary_unary_inline(servicer.AI_Auto),
      ('mc_rpc.FC', 'AI_Guided'): face_utilities.unary_unary_inline(servicer.AI_Guided),
      ('mc_rpc.FC', 'AI_RTL'): face_utilities.unary_unary_inline(servicer.AI_RTL),
      ('mc_rpc.FC', 'Auto'): face_utilities.unary_unary_inline(servicer.Auto),
      ('mc_rpc.FC', 'ControlFRU'): face_utilities.unary_unary_inline(servicer.ControlFRU),
      ('mc_rpc.FC', 'Guided'): face_utilities.unary_unary_inline(servicer.Guided),
      ('mc_rpc.FC', 'PlanRoute'): face_utilities.unary_unary_inline(servicer.PlanRoute),
      ('mc_rpc.FC', 'RTL'): face_utilities.unary_unary_inline(servicer.RTL),
      ('mc_rpc.FC', 'ResetLoiter'): face_utilities.unary_unary_inline(servicer.ResetLoiter),
      ('mc_rpc.FC', 'SetGear'): face_utilities.unary_unary_inline(servicer.SetGear),
      ('mc_rpc.FC', 'TargetByAngle'): face_utilities.unary_unary_inline(servicer.TargetByAngle),
      ('mc_rpc.FC', 'TargetByMetres'): face_utilities.unary_unary_inline(servicer.TargetByMetres),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_FC_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('mc_rpc.FC', 'AI_Auto'): id.SerializeToString,
      ('mc_rpc.FC', 'AI_Guided'): id.SerializeToString,
      ('mc_rpc.FC', 'AI_RTL'): id.SerializeToString,
      ('mc_rpc.FC', 'Auto'): id.SerializeToString,
      ('mc_rpc.FC', 'ControlFRU'): movement.SerializeToString,
      ('mc_rpc.FC', 'Guided'): id.SerializeToString,
      ('mc_rpc.FC', 'PlanRoute'): waypoints.SerializeToString,
      ('mc_rpc.FC', 'RTL'): id.SerializeToString,
      ('mc_rpc.FC', 'ResetLoiter'): id.SerializeToString,
      ('mc_rpc.FC', 'SetGear'): Gear.SerializeToString,
      ('mc_rpc.FC', 'TargetByAngle'): DistanceAngle.SerializeToString,
      ('mc_rpc.FC', 'TargetByMetres'): DistanceMetres.SerializeToString,
    }
    response_deserializers = {
      ('mc_rpc.FC', 'AI_Auto'): response.FromString,
      ('mc_rpc.FC', 'AI_Guided'): response.FromString,
      ('mc_rpc.FC', 'AI_RTL'): response.FromString,
      ('mc_rpc.FC', 'Auto'): response.FromString,
      ('mc_rpc.FC', 'ControlFRU'): response.FromString,
      ('mc_rpc.FC', 'Guided'): response.FromString,
      ('mc_rpc.FC', 'PlanRoute'): response.FromString,
      ('mc_rpc.FC', 'RTL'): response.FromString,
      ('mc_rpc.FC', 'ResetLoiter'): response.FromString,
      ('mc_rpc.FC', 'SetGear'): response.FromString,
      ('mc_rpc.FC', 'TargetByAngle'): response.FromString,
      ('mc_rpc.FC', 'TargetByMetres'): response.FromString,
    }
    cardinalities = {
      'AI_Auto': cardinality.Cardinality.UNARY_UNARY,
      'AI_Guided': cardinality.Cardinality.UNARY_UNARY,
      'AI_RTL': cardinality.Cardinality.UNARY_UNARY,
      'Auto': cardinality.Cardinality.UNARY_UNARY,
      'ControlFRU': cardinality.Cardinality.UNARY_UNARY,
      'Guided': cardinality.Cardinality.UNARY_UNARY,
      'PlanRoute': cardinality.Cardinality.UNARY_UNARY,
      'RTL': cardinality.Cardinality.UNARY_UNARY,
      'ResetLoiter': cardinality.Cardinality.UNARY_UNARY,
      'SetGear': cardinality.Cardinality.UNARY_UNARY,
      'TargetByAngle': cardinality.Cardinality.UNARY_UNARY,
      'TargetByMetres': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'mc_rpc.FC', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
